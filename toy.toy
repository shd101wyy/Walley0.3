;; 
;; Base File
;;
;; 
;; basic list function, generate list(pair)
(def (list . args) args)

;; rewrite + - * / functions
(def o_+ +) ;; store old + procedure
;; new + procedure that admit more than one arguments
(def (+ . args)
	(def (+_iter result args)
		(cond ((null? args) result)
			  (else
			  	(+_iter (o_+ result (car args))
			  			(cdr args)) 
			  	)))
	(cond ((null? args) 
		   (display "ERROR: Function + invalid parameters. Please provide parameters"))
		  (else
		  	(+_iter (car args) (cdr args)))))

(def o_- -) ;; store old - procedure
;; new - procedure that admit more than one arguments
(def (- . args)
	(def (-_iter result args)
		(cond ((null? args) result)
			  (else
			  	(-_iter (o_- result (car args))
			  			(cdr args)) 
			  	)))
	(cond ((null? args) 
		   (display "ERROR: Function - invalid parameters. Please provide parameters"))
		  ((null? (cdr args))
		  	(o_- 0 (car args)))
		  (else
		  	(-_iter (car args) (cdr args) ))))

(def o_* *) ;; store old * procedure
;; new * procedure that admit more than one arguments
(def (* . args)
	(def (*_iter result args)
		(cond ((null? args) result)
			  (else
			  	(*_iter (o_* (car args) result)
			  			(cdr args)) 
			  	)))
	(cond ((null? args)
		   (display "ERROR: Function * invalid parameters. Please provide parameters"))
		  (else
		  	(*_iter (car args) (cdr args)))))

(def o_/ /) ;; store old / procedure
;; new / procedure that admit more than one arguments
(def (/ . args)
	(def length (len args))
	(def (/_iter result args)
		(cond ((null? args) result)
			  (else
			  	(/_iter (o_/ result (car args))
			  			(cdr args)) 
			  	)))
	(cond ((null? args) 
		   (display "ERROR: Function / invalid parameters. Please provide parameters"))
		  ((null? (cdr args))
		  	(o_/ 1 (car args)))
		  (else
		  	(/_iter (car args) (cdr args) ))))

;; true and false scheme style
(def #t "true")
(def #f ())
(def nil ())

;; two kind of factorial
(def (factorial n) (if (eq? n 0) 1 (* n (factorial (- n 1)))))
(def (factorial n)(def (factorial-acc n acc)(if (eq? n 0) acc(factorial-acc (- n 1) (* acc n))))(factorial-acc n 1)) ;; currently can only run until 170

;; and macro
(defmacro and [arg0 arg1] `(if ~arg0 (if ~arg1 true false) false))

;; or macro
(defmacro or [arg0 arg1] `(if ~arg0 true (if ~arg1 true false)))

;; >
(def (> arg0 arg1) (< arg1 arg0))

;; def >= <=
(def (<= arg0 arg1) (or (< arg0 arg1) (eq? arg0 arg1)))
(def (>= arg0 arg1) (or (> arg0 arg1) (eq? arg0 arg1)))

;; now make >= <= eq? > < support vardic param
(def old-< <)
(def (< . args)
	(let [<-iter (lambda [args cur]
		  			(if (null? args) true
		  				(if (old-< cur (car args))
		  					(<-iter (cdr args) (car args))
		  					false)
		  				))
		  ]
		(if (null? args)
			(display "Please provide arguments for <")
			(<-iter (cdr args) (car args)))
		))


(def old-> >)           ;; save old >
(def (> . args)
	(let [>-iter (lambda [args cur]
		  			(if (null? args) true
		  				(if (old-> cur (car args))
		  					(>-iter (cdr args) (car args))
		  					false)
		  				))
		  ]
		(if (null? args)
			(display "Please provide arguments for >")
			(>-iter (cdr args) (car args)))
		))

(def old-eq? eq?)  ;; save old eq?
(def (eq? . args)
	(let [eq?-iter (lambda [args cur]
		  			(if (null? args) true
		  				(if (old-eq? cur (car args))
		  					(eq?-iter (cdr args) (car args))
		  					false)
		  				))
		  ]
		(if (null? args)
			(display "Please provide arguments for eq?")
			(eq?-iter (cdr args) (car args)))
		))


(def old-<= <=)   ;; save old <=
(def (<= . args)   ;; def new <=
	(let [<=-iter (lambda [args cur]
		  			(if (null? args) true
		  				(if (old-<= cur (car args))
		  					(<=-iter (cdr args) (car args))
		  					false)
		  				))
		  ]
		(if (null? args)
			(display "Please provide arguments for <=")
			(<=-iter (cdr args) (car args)))
		))

(def old->= >=)   ;; save old >=
(def (>= . args)   ;; def new >=
	(let [>=-iter (lambda [args cur]
		  			(if (null? args) true
		  				(if (old->= cur (car args))
		  					(>=-iter (cdr args) (car args))
		  					false)
		  				))
		  ]
		(if (null? args)
			(display "Please provide arguments for >=")
			(>=-iter (cdr args) (car args)))
		))



;; def not
(def (not arg0) (if arg0 false true))

;; check type
(def (pair? arg) (eq? (typeof arg) 'list))
(def (list? arg) pair?)
(def (integer? arg) (and (ratio? arg) (eq? (denominator arg) 1)))
(def (atom? arg) (eq? (typeof arg) 'atom))
(def (string? arg) atom?)
(def (vector? arg) (eq? (typeof arg) 'vector))
(def (dictionary? arg) (eq? (typeof arg) 'dictionary))







