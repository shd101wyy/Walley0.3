#include <stdio.h>
#include <stdlib.h>

/* opcodes */
#define SET 0x0
#define GET 0x1
#define CONST 0x2
#define MAKE_LAMBDA 0x3
#define RETURN 0x4
#define NEWFRAME 0x5
#define PUSH_ARG 0x6
#define CALL 0x7
#define JMP 0x8
#define TEST 0x9

#define GLOBAL_FRAME_SIZE 1024

/* data types */
typedef enum
{
	INTEGER,
	DOUBLE,
	STRING,
	PAIR,
	// RATIO,
	LAMBDA,
	BUILTIN_LAMBDA,
	VECTOR
	// DICTIONARY
} DataType;

/*
	several data types
*/
struct Object {
  DataType type;
  int use_count;
  union {
    struct {
      long v;
    } Integer;
    struct {
      double v;
    } Double;
    /*
      struct
      {
      long denom;
      long numer;
      } Ratio;
    */
    struct {
      char * v;
    } String;
    struct {
      Object * car;
      Object * cdr;
    } Pair;
    struct {
      int start;
    } Lambda;
    struct {
      Object ** v;   // array of pointers
      int size;      // size of allocated vector
      int length;    // length
      char resizable;  // is this vector resizable
    } Vector;
  } data;
};
/*
  allocate object
*/
Object * allocateObject()
{
  Object * o = (Object*)malloc(sizeof(Object));
  if(o == NULL){
    printf("ERROR:Out of memory\n");
    exit(1);
  }
  o->use_count = 0;
  return o;
}
/*
  initialize integer
*/
Object * Object_initInteger(long v){
  Object * o = allocateObject();
  o->type = INTEGER;
  o->data.Integer.v = v;
  return o;
}
/*
  initialize double
*/
Object * Object_initDouble(double v){
  Object * o = allocateObject();
  o->type = DOUBLE;
  o->data.Double.v = v;
  return o;
}
/*
  initialize string
*/
Object * Object_initString(char * v){
  Object * o = allocateObject();
  o->type = STRING;
  o->data.String.v = malloc(sizeof(char)*(strlen(v) + 1));
  if(o->data.String.v == NULL)
    {
      printf("ERROR:Out of memory\n");
      exit(1);
    }
  strcpy(o->data.String.v, v);
  return o;
}
/*
  initialize vector
  default size 32
*/

Object * Object_initVector(char resizable, int size){
  Object * o = allocateObject();
  o->type = VECTOR;
  o->data.Vector.size = size;
  o->data.Vector.length = 0;
  o->data.Vector.resizable = resizable;
  o->data.Vector.v = malloc(sizeof(Object*) * (size)); // array of pointers
  return o;
}

/*
  cons
*/
Object * cons(Object * car, Object * cdr){
  Object * o = allocateObject();
  o->type = PAIR;
  o->data.Pair.car = car;
  o->data.Pair.cdr = cdr;
  return o;
}

/*
  add value to environment
 */
void addValueToEnvironment(Object * env, Object * value, int m, int n){
  Object * frame = env->data.Vecctor.v[m];
  frame->data.Vector.v[n] = value;
}

/*
  create frame0
*/
Object *createFrame0(){
  Object * frame = Object_initVector(0, GLOBAL_FRAME_SIZE);
  return frame;
}
/*
  create environment
*/
Object *createEnvironment(){
  Object * env = Object_initVector(1, 32); // create env
  env->data.Vector.v[0] = createFrame0();  // add frame0
}
/*
  Walley Language Virtual Machine
 */
Object *VM(int * instructions,
	   int instructions_num,
	   int pc,
	   Object * env){

}
