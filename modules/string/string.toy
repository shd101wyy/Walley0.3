;; define string package
(def (install-string-package)
     ;; append string
     ;; here I used native "+" function
     (def string-append +)
     ;; get string length
     ;; here I used native "len" function
     (def string-length len)
     ;; get character at index
     ;; here I used native "ref" function
     (def string-ref ref)
     ;; check strings equality
     ;; here I used native "eq?" function
     (def string-eq? eq?)
     ;; get string slice
     (def string-slice (lambda [input-str start-index :end-index -1]
			 ;; set end-index
			 (let [end-index (if (eq? end-index -1)
					     (len input-str)
					     end-index)
			       helper 
			       (lambda [i output-str]
				 (if (eq? i end-index)
				     output-str
				     (helper (+ i 1)
					     (+ output-str (ref input-str i))))
				 )]
			   (helper start-index "")
			   )))
    
     ;; string find string
     ;; eg: (str:find "Hello" "H")   => 0
     ;; eg: (str:find "Hello" "l" 3) => 3
     (def string-find (lambda [input-str find-string :start-index 0 :end-index -1]
			;; set end-index
			(let [end-index 
			      (if (eq? end-index -1)
				  (string-length input-str)
				  end-index)
			      ;; save input-str length
			      input-str-length (string-length input-str)
			      ;; save find-string length
			      find-string-length (string-length find-string)
			      ;; helper
			      string-find-helper 
			      (lambda [i]
				;; didn't find required string
				(cond [(> (+ i find-string-length) end-index)
				       -1]
				      [(eq? (string-slice input-str i (+ i find-string-length))
					    find-string)
				       i]
				      [else 
				       (string-find-helper (+ i 1))
				       ]
				      )
				)
			      ]
			  (string-find-helper start-index)
			  )
			))
     ;; string replace string
     ;; eg: (str:replace "Hello" "l" "a") => "Healo"
     ;; eg: (str:replace "Hello" "l" "a" 3) => "Helao"
     (def string-replace (lambda [input-str replace-string with-string :start-index 0]
			   (let [replace-string-length (string-length replace-string)
				 input-str-length (string-length input-str)
				 helper
				 (lambda [i output-str]
				          ;; didn't find so couldn't replace 
				   (cond [(> (+ i replace-string-length) input-str-length)
					  input-str]
					 ;; find replace string
					 [(eq? (string-slice input-str i (+ i replace-string-length)) replace-string)
					  (+ output-str with-string (string-slice input-str (+ i replace-string-length)))]
					 [else (helper (+ i 1) (+ output-str (string-ref input-str i)))]
					 ))]
			     (helper start-index (string-slice input-str 0 start-index))
			     )))
     ;; replace all
     ;; eg: (str:replace-all "Hello" "l" "a") => "Heaao"
     ;; eg: (str:replace-all "Hello" "l" "a" 3) => "Helao"
     ;; eg: (str:replace-all "Hello" "l" "a" 0 3) => "Healo"
     (def string-replace-all (lambda [input-str replace-string with-string :start-index 0 :end-index -1]
			       (let [end-index (if (eq? end-index -1)
						   (string-length input-str)
						   end-index)
				     input-str-length (string-length input-str)
				     replace-string-length (string-length replace-string)
				     helper 
				     (lambda [i output-str]
				             ;; reach rend
				       (cond [(> (+ i replace-string-length) end-index)
					      (+ output-str (string-slice input-str i))]
					     ;; find replace string
					     [(eq? (string-slice input-str i (+ i replace-string-length)) replace-string)
					      (helper (+ i replace-string-length)
						      (+ output-str with-string))]
					     [else
					      (helper (+ i 1)
						      (+ output-str (string-ref input-str i)))]
					     ))]
				 (helper start-index (string-slice input-str 0 start-index))
				 )))
     ;; split string
     (def string-split (lambda [input-string 
				split-str
				:start-index 0
				:return-vector true]
			 (let [i start-index
			       return-vector-func (lambda [output i saved-string]
						    (if (eq? i (len input-string)) ;; end
							(conj! output saved-string)
							;; not end yet
							(if (> (+ i (len split-str)) (len input-string)) 
							    ;; couldn't split
							    (conj! output (+ saved-string (string-slice input-string i (len input-string))))
							    (if (eq? split-str (string-slice input-string i (+ i (len split-str))))
								;; could split
								(return-vector-func (conj! output saved-string)
										    (+ i (len split-str))
										    "")
								(return-vector-func output
										    (+ i 1)
										    (+ saved-string (ref input-string i)))
								)
							    )
							)
						    )
			       return-list-func (lambda [i saved-string]
						    (if (eq? i (len input-string)) ;; end
							`(~saved-string)
							;; not end yet
							(if (> (+ i (len split-str)) (len input-string)) 
							    ;; couldn't split
							    `(~ (+ saved-string (string-slice input-string i (len input-string))))
							    (if (eq? split-str (string-slice input-string i (+ i (len split-str))))
								;; could split
								(cons saved-string (return-list-func (+ i (len split-str))
												     ""))
								(return-list-func (+ i 1)
										  (+ saved-string (ref input-string i)))
								)
							    )
							)
						    )
			       ]
			   (if return-vector
			       (return-vector-func #[] start-index "")
			       (return-list-func start-index ""))
			   )
			 ))
     
     ;; eg "Hello" => Hello
     ;; eg "Hello abc" => #str{Hello abc}
     (def (format-string input-str)
	  (let [i (string-find input-str " ")]
	    (if (eq? i -1)
		input-str
		(string-append "#str{" input-str "}"))))
     
     ;; (def (format-number input-str)
	;;  (cond [(integer? input-str)
	;;	 ]))

     ;; test format-string
     ;; (display (format-string "hab c"))
     
      ;; string to upper case
     (def string-toupper (lambda [input-str]
	  (let [length (len input-str)
	        helper (lambda [i output]
			 (if (eq? i length)
			     output
			     (let [c (ref input-str i)]
			       (cond [(eq? c "a")
				      (helper (+ i 1)
					      (+ output "A"))]
				      [(eq? c "b")
				       (helper (+ i 1)
					       (+ output "B"))]
				      [(eq? c "c")
				      (helper (+ i 1)
					      (+ output "C"))]
				      [(eq? c "d")
				       (helper (+ i 1)
					      (+ output "D"))]
				      [(eq? c "e")
				       (helper (+ i 1)
					      (+ output "E"))]
				      [(eq? c "f")
				       (helper (+ i 1)
					      (+ output "F"))]
				      [(eq? c "g")
				       (helper (+ i 1)
					      (+ output "G"))]
				      [(eq? c "h")
				       (helper (+ i 1)
					      (+ output "H"))]
				      [(eq? c "i")
				       (helper (+ i 1)
					      (+ output "I"))]
				      [(eq? c "j")
				       (helper (+ i 1)
					      (+ output "J"))]
				      [(eq? c "k")
				       (helper (+ i 1)
					      (+ output "K"))]
				      [(eq? c "l")
				       (helper (+ i 1)
					      (+ output "L"))]
				      [(eq? c "m")
				       (helper (+ i 1)
					      (+ output "M"))]
				      [(eq? c "n")
				      (helper (+ i 1)
					      (+ output "N"))]
				      [(eq? c "o")
				      (helper (+ i 1)
					      (+ output "O"))]
				      [(eq? c "p")
				       (helper (+ i 1)
					      (+ output "P"))] 
				      [(eq? c "q")
				       (helper (+ i 1)
					      (+ output "Q"))]
				      [(eq? c "r")
				       (helper (+ i 1)
					       (+ output "R"))]
				      [(eq? c "s")
				       (helper (+ i 1)
					      (+ output "S"))]
				      [(eq? c "t")
				       (helper (+ i 1)
					       (+ output "T"))] 
				      [(eq? c "u")
				       (helper (+ i 1)
					      (+ output "U"))]
				      [(eq? c "v")
				       (helper (+ i 1)
					       (+ output "V"))]
				      [(eq? c "w")
				       (helper (+ i 1)
					       (+ output "W"))]
				      [(eq? c "x")
				       (helper (+ i 1)
					       (+ output "X"))]
				      [(eq? c "y")
				       (helper (+ i 1)
					       (+ output "Y"))]
				      [(eq? c "z")
				       (helper (+ i 1)
					       (+ output "Z"))]
				      
				      [else (helper (+ i 1)
						    (+ output c))] ;; huhhhh
				      ))))]
	    (helper 0 ""))))

     {:len len , 
      :find string-find ,
      :slice string-slice ,
      :ref string-ref ,
      :replace string-replace , 
      :replace-all string-replace-all ,
      :append string-append ,
      :eq? string-eq? , 
      :split string-split ,
      :toupper string-toupper
      }			
     )			

;; set str namespace
(def string (install-string-package))
(display (string:replace-all "Hello" "ll" "abcd"))
(display (string:split "Hellolalblcdl" "l" :return-vector false :start-index 4))
(display (string:toupper "Hasdadb"))




























