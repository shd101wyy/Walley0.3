;; (+1! i)
(defmacro +1! [name] `(set! ~name (+ ~name 1)))

;; ====================================
;; loop module
;; for loop
;; (for [i '(3 4 5)]
;;	 (display i))
(defmacro for [[var-name l] . body]
	(let [name (gensym)]
		`(let [~name (lambda [l]
			(if (null? l)
				()
				(let [~var-name (car l)]
					~@body
					(~name (cdr l)))
				))] 
			(~name ~l))
		)
	;;`(if (null? ~l)
	;;	()
	;;	(begin 
	;;		~@body
	;;		(for [~var-name (cdr ~l)] ~@body))) 
			
			)

;; (display (macroexpand-1 '(for [i '(1 2 3)] (display i))))
;; (for [i '(1 2 3 4 5 6 7 8 9 0)]
;;	(display i))


;; =====================================
;; (while [< i 10] (inc i))
(defmacro while [judge . body]
	(let [name (gensym)]
		`(let [~name (lambda []
			(if ~judge 
				(begin ~@body (~name))
				()))]
			(~name))
		))

;; (def i 0)
;; (+1! i)
;; (display (macroexpand-1 '(while [< i 2] (display i) (set! i (+ i 1)) (display i))))
;; (while [< i 10] (display i) (set! i (+ i 1)) (display i))

