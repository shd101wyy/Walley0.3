
;; 定义矩阵包
;; 如何使用
;; (def m (install-matrix-package))
;; 
;; m:+ 矩阵加法  eg (m:+ '((1 2)) '((3 4)))
;; m:- 矩阵减法  eg (m:- '((1 2)) '((3 4)))
;; m:col 得到第n列 of matrix    eg (m:col '((1)) 0) => '(1)
;; m:transpose  transpose the matrix
;; m:* 矩阵乘法  eg (m:* '((1 2)(3 4)) '((3 4)(1 2)) )

(def (install-matrix-package)
	;;;
		矩阵加法
		(matrix-add '((1 2)) '((3 4))) => '((4 6))
	;;;
	(def (matrix-add m1 m2)
		(cond ((null? m1)
			'())
		  (else (cons (map + (car m1) (car m2))
		  			  (matrix-add (cdr m1) (cdr m2))))))
	;;;
		矩阵减法
		(matrix-minus '((1 2)) '((3 4))) => '((-2 -2))
	;;;
	(def (matrix-minus m1 m2)
		(cond ((null? m1)
			   '())
		  (else (cons (map - (car m1) (car m2))
		  			  (matrix-minus (cdr m1) (cdr m2))))))

	;;;
		得到第n个列 of matrix
	;;;
	(def (matrix-col mat :n 0)
		(cond ((null? mat)
			   '())
			  (else (cons (ref (car mat) n)
				  		  (matrix-col (cdr mat) n)))))
	;;;
		transpose 
		((1 2)
		 (3 4))
		=>
		((1 3)
		 (2 4))
	;;;
	(def (matrix-transpose mat)
		(def (matrix-transpose-helper mat n max-n)
			(cond ((eq? n max-n)
				'())
			  (else (cons (matrix-col mat n)
			  			  (matrix-transpose-helper mat (+ n 1) max-n)))))
		(matrix-transpose-helper mat 0 (len (car mat))))


	;;; 
		矩阵乘法

		((1 2)    *  ((1 2)
		 (3 4))  	  (3 4))
	;;;
	(def (f row m2 n max-n)
			(cond ((eq? n max-n) '())
				  (else (cons (apply + (map * row (matrix-col m2 n)))
				  			  (f row m2 (+ n 1) max-n)))))
	(def (matrix-mult m1 m2)
		(cond ((null? m1)
				'())
			  (else (cons (f (car m1) m2 0 (len (car m2)))
			  			  (matrix-mult (cdr m1) m2)))))

	;; output 
	{
		:+ matrix-add ,
	 	:- matrix-minus ,
	 	:col matrix-col ,
	 	:transpose matrix-transpose ,
	 	:* matrix-mult
	 }
	)

;; eg
(def m (install-matrix-package))
(display (m:-
	'((1 2))
	'((3 4))))

(display (m:col 
	'(  (1 2 3 4)
		(4 5 6 7))
		0
	))
(display (m:transpose 
	'((1 2)
	  (3 4)
	  (5 6))))
(display (m:* 
	'((1 2)(3 4)(5 6))
	'((1 2 5)(3 4 6))))


