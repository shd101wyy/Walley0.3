;; 
;; Base File
;;
;; 
;; basic list function, generate list(pair)
(def (list . args) args)

;; cond macro
;;;
	(cond (judge1 body1)
		  (judge2 body2)
		  ...
		  (else bodyn))
;;;
(defmacro cond [arg . args]
	(if (eq? (car arg) 'else)
		(cons 'begin (cdr arg)) ;; else 
		(if (null? args)
			(let [judge (car arg)
				  body (cons 'begin (cdr arg))]
				`(if ~judge ~body ()))
			(let [rest (cons 'cond args)
				  judge (car arg)
				  body (cons 'begin (cdr arg))]
				  `(if ~judge ~body ~rest)
				))))

;; rewrite + - * / functions
;; new + procedure that admit more than one arguments
(set! + 
	(let 
		[o_+ + ;; store old +
		+_iter (lambda [result args]
					(cond ((null? args) result)
					  (else
					  	(+_iter (o_+ result (car args))
					  			(cdr args)) 
					  	)))
			]
		(lambda [. args]
			(cond ((null? args) 
				   (display "ERROR: Function + invalid parameters. Please provide parameters"))
				  (else
				  	(+_iter (car args) (cdr args))))
			)))

;; new - procedure that admit more than one arguments
(set! - 
	(let [o_- - ;; store old - procedure
		  -_iter (lambda [result args]
					(cond ((null? args) result)
					  (else
					  	(-_iter (o_- result (car args))
					  			(cdr args)) 
					  	))
		  			)
			]
		(lambda [. args]
			(cond ((null? args) 
				   (display "ERROR: Function - invalid parameters. Please provide parameters"))
				  ((null? (cdr args))
				  	(o_- 0 (car args)))
				  (else
				  	(-_iter (car args) (cdr args)))))))


;; new * procedure that admit more than one arguments
(set! * 
	(let [o_* * ;; store old * procedure
		  *_iter (lambda [result args]
		  			(cond ((null? args) result)
					  (else
					  	(*_iter (o_* (car args) result)
					  			(cdr args)) 
					  	)))]

		(lambda [. args]
			(cond ((null? args)
		   		(display "ERROR: Function * invalid parameters. Please provide parameters"))
		  	(else
		  		(*_iter (car args) (cdr args)))))))

;; new / procedure that admit more than one arguments
(set! / 
	(let [o_div / ;; store old / procedure
		  div_iter (lambda [result args]
		  			(cond ((null? args) result)
					  (else
					  	(div_iter (o_div result (car args))
					  			(cdr args)) 
					  	)))]
		(lambda [. args]
			(cond ((null? args) 
			   (display "ERROR: Function / invalid parameters. Please provide parameters"))
			  ((null? (cdr args))
			  	(o_div 1 (car args)))
			  (else
			  	(div_iter (car args) (cdr args) ))))))


;; true and false scheme style
(def #t "true")
(def #f ())
(def nil ())

;; two kind of factorial
(def (factorial n) (if (eq? n 0) 1 (* n (factorial (- n 1)))))
(set! factorial (lambda (n) (def (factorial-acc n acc) (if (eq? n 0) acc (factorial-acc (- n 1) (* acc n)))) (factorial-acc n 1)))

;;; WRONG MACROS
;; and macro
(defmacro and [arg0 arg1] `(if ~arg0 (if ~arg1 true false) false))
;; or macro
(defmacro or [arg0 arg1] `(if ~arg0 true (if ~arg1 true false)))
;;;

;; NEW AND OR
(defmacro and [. args]
	(if (null? args) 
		true 
		(let [judge (car args)]
			`(if ~judge (apply and (cdr '~args)) false))))
	
(defmacro or [. args] 
	(if (null? args)
		false
		(let [judge (car args)]
			`(if ~judge true (apply or (cdr '~args))))))

;; >
(def (> arg0 arg1) (< arg1 arg0))

;; def >= <=
(def (<= arg0 arg1) (or (< arg0 arg1) (eq? arg0 arg1)))
(def (>= arg0 arg1) (or (> arg0 arg1) (eq? arg0 arg1)))

;; now make >= <= eq? > < support vardic param
(set! < 
	(let [old-< <
		  <-iter (lambda [args cur]
					(if (null? args) true
		  				(if (old-< cur (car args))
		  					(<-iter (cdr args) (car args))
		  					false)
		  				))
			]
		(lambda [. args]
			(if (null? args)
				(display "Please provide arguments for <")
				(<-iter (cdr args) (car args))))))

(set! > 
	(let [old-> >
		 >-iter (lambda [args cur]
		  			(if (null? args) true
		  				(if (old-> cur (car args))
		  					(>-iter (cdr args) (car args))
		  					false)
		  				))]

		(lambda [. args]
			(if (null? args)
				(display "Please provide arguments for >")
				(>-iter (cdr args) (car args))))))


(set! eq? (let [old-eq? eq?
				eq?-iter (lambda [args cur]
		  			(if (null? args) true
		  				(if (old-eq? cur (car args))
		  					(eq?-iter (cdr args) (car args))
		  					false)
		  				))]

			(lambda [. args]
				(if (null? args)
					(display "Please provide arguments for eq?")
					(eq?-iter (cdr args) (car args))))))

(set! <=
	(let [old-<= <=
		  <=-iter (lambda [args cur]
		  			(if (null? args) true
		  				(if (old-<= cur (car args))
		  					(<=-iter (cdr args) (car args))
		  					false)
		  				))]
		 (lambda [. args]
		 	(if (null? args)
				(display "Please provide arguments for <=")
				(<=-iter (cdr args) (car args))))))

(set! >= 
	(let [old->= >=
		  >=-iter (lambda [args cur]
		  			(if (null? args) true
		  				(if (old->= cur (car args))
		  					(>=-iter (cdr args) (car args))
		  					false)
		  				))]
		(lambda [. args]
			(if (null? args)
				(display "Please provide arguments for >=")
				(>=-iter (cdr args) (car args))))))

;; def not
(def (not arg0) (if arg0 false true))

;; check type
;; there is not atom or symbol anymore, only string
(def (pair? arg) (eq? (typeof arg) 'list))
(def (list? arg) pair?)
(def (string? arg) (eq? (typeof arg) 'string))
;; (def string? atom?)
(def (vector? arg) (eq? (typeof arg) 'vector))
(def (dictionary? arg) (eq? (typeof arg) 'dictionary))
(def (undefined? arg) (eq? arg 'undefined))
(def (procedure? arg) (eq? (typeof arg) 'procedure))
(def (function? arg) procedure?)
(def (macro? arg) (eq? (typeof arg) 'macro))
;; (def (rational? arg) (or (integer? arg) (ratio? arg)))
;; Math
(def ** math:pow)
(def ^ math:pow)

(assoc! math :log (lambda [x y] (/ (math:loge y) (math:loge x))))
;; (def (log x y) (/ (loge y) (loge x)))

(assoc! math :sec (lambda [x] (/ 1 (math:cos x))))
;; (def (sec x) (/ 1 (cos x)))

(assoc! math :csc (lambda [x] (/ 1 (math:sin x))))
;; (def (csc x) (/ 1 (sin x)))

(assoc! math :cot (lambda [x] (/ 1 (math:tan x))))
;; (def (cot x) (/ 1 (tan x)))

;; remainder function
(def (% n0 n1) (let [result (->int (/ n0 n1))] (- n0 (* result n1))))


;; append element to list
(def (append a b)
	(if (null? a) b
		(cons (car a) (append (cdr a) b))))
;; reverse the list
(def (reverse l)
	(def (reverse-iter result l)
		(if (null? l) 
			result
			(reverse-iter (cons (car l) result) (cdr l))))
	(reverse-iter () l))

;; defn macro
(defmacro defn [fn_name args . body] (list 'def fn_name (cons 'lambda (cons args body)) ))
;; comment macro
(defmacro comment [. args] ())

;; map function
;; (+ (2 3) (5 6)) => (7 9)
;; apply (+ (2 5)) and (+ (3 6))
(def (map func . args)
	(def length (len (car args)))
	;; organize
	(def (get-args-list args i)
		(if (null? args)
			()
			(cons (ref (car args) i) (get-args-list (cdr args) i)))) 
	;; ((1 2) (3 4)) => (1 3) (2 4)
	(def (map-iter func args i)
		(cond ((eq? i length) ())
			  (else (cons (apply func (get-args-list args i))
			  			  (map-iter func args (+ i 1))))))
	(map-iter func args 0))
;; (display (map + '(3 4) '(5 6))) => (8 10)

;; convert list to string
(def (str . args)
	(def (str-iter result args)
		(if (null? args)
			result
			(str-iter (+ result (->str (car args))) (cdr args))
				))
	(str-iter "" args))
;; test string function
;; (str 12 15 "Hi")

;; convert ratio or integer to float
;; only work for number
(def (->float num) (* num 1.0))
;; convert number to int
(def (->int num) (cond ((eq? num 0) 0) ((> num 0) (math:floor num)) (else (math:ceil num))))

;; diff func
;; eg d(x^2)/dx at point 0 is
;; (diff (lambda [x] (^ x 2)) 0)
(def (diff func diff-at-point :error 0.000001)
     (def (diff_ error)
	      (/  (- (func diff-at-point)
	  		 (func (- diff-at-point error)))
	   	  error))
	(diff_ error))
;; (display (diff (lambda [x] (^ x 2)) 2))


;; simple integral func
;; eg integral of sin(x) from 0 to 1 with dx = 0.0001
;; (integral (lambda [x] (math:sin x)) 0 1 0.0001) 
(def (integral func a b :dx 0.01)
	(def (sum term a next b)
		(if (> a b)
			0
			(+ (term a)
				(sum term (next a) next b))))
	(def (add-dx x) (+ x dx))
	(* (sum func (+ a (/ dx 2.0)) add-dx b)
		dx))

;; (display (integral (lambda [x] x) 0 2 0.001))
;; (display (integral (lambda [x] (* x x x)) 0 1 0.01))

;; non-destructive set-car, which will return new created value
(def (set-car x value) (cons value (cdr x)))

;; non-destructive set-cdr, which will return new created value
(def (set-cdr x value) (cons (car x) value))

;; check variable bounded or not
;; (def (variable-exists? var-name)
;;	(def (variable-exists?-iter var-name env count)
;;		(if (eq? count (len env))
;;			false
;;			(if (eq? (ref (ref env count) var-name) 'undefined)
;;				(variable-exists?-iter var-name env (+ count 1))
;;				true)))
;;	(variable-exists?-iter var-name (get-env) 0))

;; check variable exists
(set! undefined? (lambda (var-name) (__undefined?__ var-name (get-env))))


;; gensym
(def (make-gensym)
	(let [count 0 ,
		  step 1 ,
		  set-name (lambda []
		  	(set! count (+ count step)) ;; change count
		  	(let [var-name (str "t_" count)] ;; create var-name
		  		(if (undefined? var-name)
		  			var-name
		  			(set-name))))]
		 set-name))
(def gensym (make-gensym))

;; load macro. the same as scheme
(defmacro load [file-name] `(eval (cons 'begin (read (read-file ~file-name)))))

;; for macro
;; (for [i '(1 2 3)] (display i)) => 1 2 3 one by one
(defmacro for [[i l] . body]
  `(let [f (lambda [l] (if (null? l)
			   'undefined
			   (let [~i (car l)]
			     ~@body
			     (f (cdr l)))))]
     (f ~l)))

