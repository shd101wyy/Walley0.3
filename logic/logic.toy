;;;
==================================================================
==================================================================
==================================================================
========= Simple Logic Module =========  by shd101wyy  ===========
==================================================================
==================================================================
==================================================================
========= Read more Information from README.md ===================
==================================================================
==================================================================
==================================================================
;;;

(def 事实数据库 {})

;; (事实 '(喜欢 小王 小李))
(defn 事实 
	;; "该函数用于创建事实"
	[data]
	(let [
			谓语动词 (car data)
			事实参数 (cdr data)
			]
		(if (eq? (事实数据库 谓语动词) 'undefined) ;; 谓语动词不存在
			(assoc! 事实数据库 谓语动词 `(~事实参数)) ;; 谓语动词不存在
			(assoc! 事实数据库 谓语动词 (cons 事实参数 (事实数据库 谓语动词)))
			)
	))

;; test 
;; 创建事实
(事实 '(喜欢 小王 小李))
(事实 '(喜欢 小李 小王))
(display 事实数据库)  ;; => {喜欢 ((小李 小王) (小王 小李)),}

(defn 判断事实 
	;; "该函数用于判断 事实 是否正确"
	[事实]
	(let [谓语动词 (car 事实)
		  事实参数 (cdr 事实)
		  数据 (ref 事实数据库 谓语动词)
		  list-same (lambda [list1 list2] ;; 检查两个list是否相同
		  				(cond ((null? list1)
		  						(cond ((null? list2)
		  								true)
		  							  (else 
		  							  	false))
		  						)
		  					  ((null? list2)
		  					  	false)
		  					  ((eq? (car list1) (car list2))
		  					  	(list-same (cdr list1) (cdr list2)))
		  					  (else false)))
		  判断事实-iter (lambda [数据]
		  				(cond ((null? 数据)
		  						false) ;; 事实不存在
		  					  ((list-same (car 数据) 事实参数)
		  					  	true) ;; 事实存在
		  					  (else
		  					  	(判断事实-iter (cdr 数据))
		  					  	) 
		  					))]
		  (if (eq? 数据 'undefined)
		  	() ;; 事实不存在
		  	(判断事实-iter 数据)
		  	)))

;; (display (判断事实 '(喜欢 小李 小王))) ;; => true
;; (display (判断事实 '(喜欢 小王 小王))) ;; => false ()
;; (display (判断事实 '(喜欢 小2 小3))) ;; => false ()


(defn )














