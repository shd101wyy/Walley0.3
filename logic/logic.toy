;;;
==================================================================
==================================================================
==================================================================
========= Simple Logic Module =========  by shd101wyy  ===========
==================================================================
==================================================================
==================================================================
========= Read more Information from README.md ===================
==================================================================
==================================================================
==================================================================
;;;

(def 事实数据库 {})

;; (事实 '(喜欢 小王 小李))
(defn 事实 
	"该函数用于创建事实"
	[data]
	(let [
			谓语动词 (car data)
			事实参数 (cdr data)
			]
		(if (eq? (事实数据库 谓语动词) 'undefined) ;; 谓语动词不存在
			(assoc! 事实数据库 谓语动词 `(~事实参数)) ;; 谓语动词不存在
			(assoc! 事实数据库 谓语动词 (cons 事实参数 (事实数据库 谓语动词)))
			)
	))

;; test 
;; 创建事实
(事实 '(喜欢 小王 小李))
(事实 '(喜欢 小李 小王))
(display 事实数据库)  ;; => {喜欢 ((小李 小王) (小王 小李)),}


;;==================================================
;;==================================================
;;==================================================

(defn 判断事实 
	"该函数用于判断 事实 是否正确"
	[事实]
	(let [谓语动词 (car 事实)
		  事实参数 (cdr 事实)
		  数据 (ref 事实数据库 谓语动词)
		  list-same (lambda [list1 list2] ;; 检查两个list是否相同
		  				(cond ((null? list1)
		  						(cond ((null? list2)
		  								true)
		  							  (else 
		  							  	false))
		  						)
		  					  ((null? list2)
		  					  	false)
		  					  ((eq? (car list1) (car list2))
		  					  	(list-same (cdr list1) (cdr list2)))
		  					  (else false)))
		  判断事实-iter (lambda [数据]
		  				(cond ((null? 数据)
		  						false) ;; 事实不存在
		  					  ((list-same (car 数据) 事实参数)
		  					  	true) ;; 事实存在
		  					  (else
		  					  	(判断事实-iter (cdr 数据))
		  					  	) 
		  					))]
		  (if (eq? 数据 'undefined)
		  	() ;; 事实不存在
		  	(判断事实-iter 数据)
		  	)))

;; (display (判断事实 '(喜欢 小李 小王))) ;; => true
;; (display (判断事实 '(喜欢 小王 小王))) ;; => false ()
;; (display (判断事实 '(喜欢 小2 小3))) ;; => false ()

;;==================================================
;;==================================================
;;==================================================
(defn 获取事实判断
	"该函数用于获取 事实 判断"
	;;;
		(事实 '(喜欢 小王 小李))
		(获取事实判断 '(喜欢 小王 X) '(X)) => ({:X 小李})  
	;;; 
	[事实 变量]
	(let [是变量 (lambda [x 变量] ;; 查看x是不是变量
					(cond ((null? 变量)
							false) ;; 不是变量
						  ((eq? (car 变量) x)
						  	true)  ;; 是变量
						  (else (是变量 x (cdr 变量)))))
			谓语动词 (car 事实)
			事实参数 (cdr 事实)
			数据 (ref 事实数据库 谓语动词)
			整理数据 (lambda [数据1 事实参数 变量]
					;;;
						例如 数据1   (喜欢 小王 小李)
							事实参数 (小王 X)
							变量 (X)
						返回
							{:X 小李}
					;;;
					;;;
						(display "整理数据函数")
						(display 数据1)
						(display 事实参数)
						(display 变量)
					;;;
						(let [output {}
							  f (lambda [数据1 事实参数 变量]
					;;;
							  		(display "Enter Here")
							  		(display 数据1)
									(display 事实参数)
									(display 变量)
					;;;
								  	(cond ((and (null? 数据1) (null? 事实参数))
											output) ;; 扫描结束
										  ((or (and (null? 数据1) (not (null? 事实参数))) ;; 扫描结束， 不符合
										  	   (and (null? 事实参数) (not (null? 数据1))))
										  	false)
										  (else 
										  	(let [参数是变量 (是变量 (car 事实参数) 变量)]
										  	;;;
										  		(display "参数是变量")
										  		(display 参数是变量)
										  	;;;
										  		(cond ((and (not 参数是变量) 
										  					(not (eq? (car 事实参数) (car 数据1))))
										  				;; 不是变量并且数据不符合
										  				false
										  				)
										  			  ((and (not 参数是变量)
										  			  		(eq? (car 事实参数) (car 数据1)))
										  			  	;; 不是变量但是数据符合
										  			  	(f (cdr 数据1) (cdr 事实参数) 变量))
										  			  (else ;; 参数是变量
										  			  		(if (not (eq? (ref output (car 事实参数)) 'undefined))
										  			  			;; 已经在output中存在了
										  			  			(cond
																	((not (eq? (ref output (car 事实参数)) (car 数据1)))
												  			  			false ;; 数据不符合
												  			  			)
												  			  		(else  ;; 数据符合
										  			  					(f (cdr 数据1) (cdr 事实参数) 变量))
										  			  				)
										  			  			;; 不在 output 存在
										  			  			(begin
										  			  				;; 添加对应数值到output
										  			  				(assoc! output (car 事实参数) (car 数据1))
										  			  				(f (cdr 数据1) (cdr 事实参数) 变量)
										  			  					)
										  			  				)
										  			  		))))))
							 ]
							 (f 数据1 事实参数 变量)
							))
			获取事实判断-iter (lambda [数据]
				(def (f 数据 结果)
					(cond ((null? 数据) ;;完成了对数据的扫描, 返回结果
							结果)
						  (else
						  	(let [output (整理数据 (car 数据) 事实参数 变量)]
						  		(if (eq? output false)
						  			(f (cdr 数据) 结果) ;; 不是有效的output
						  			(f (cdr 数据) (cons output 结果)))))))
				(f 数据 ()))
			]
		(if (eq? 数据 'undefined)
			() ;; 数据不存在 
			(获取事实判断-iter 数据))
		))

;;  (事实 '(喜欢 我 你 他))
;;  (display (获取事实判断 '(喜欢 X Y 他) '(X Y)))
;;;
	(事实 '(喜欢 小王 小李))
	(事实 '(喜欢 小李 小王))
	(display (获取事实判断 '(喜欢 X Y) '(X Y))) 
	=>
	({X 小王, Y 小李,} {X 小李, Y 小王,})

	(事实 '(喜欢 我 你 他))
	(display (获取事实判断 '(喜欢 X Y 他) '(X Y)))
	=> 
	({X 我, Y 你,})

;;;
;; =======================================
;; =======================================
;; =======================================
;; =======================================

(defn 整理表达式

	;;;给函数用于整理表达式 
		例如 

		(整理表达式 '(a b c d) {:b 12 :c 15}) => '(a 12 15 d) replace 'b and 'c   

		(整理表达式 '((a b) b a) {:a 1}) => '((1 b) b 1) replace 'a
	;;;

	[stms 匹配数据]
	(cond ((null? stms)
			'())
		  ((pair? (car stms))
		  	(cons (整理表达式 (car stms) 匹配数据)
		  		  (整理表达式 (cdr stms) 匹配数据)))
		  (else 
		  	(let [a (car stms)
		  		  b (cdr stms)]
		  		  (if (eq? (ref 匹配数据 a) 'undefined)
		  		  	(cons a (整理表达式 b 匹配数据))
		  		  	(cons (ref 匹配数据 a) (整理表达式 b 匹配数据))
		  		  	)))))

;;    (def test
;;		{:a 12 :b 15})
;; (display (整理表达式 '(a b c (c d a b) d) test))
;; (display (get-function-doc 整理表达式))












