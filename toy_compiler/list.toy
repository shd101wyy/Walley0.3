;; toy language
;; list library
;;
(def null '())
(def nil '())
(def (cadr x) (car (cdr x)))
(def (cddr x) (cdr (cdr x)))
(def (caddr x) (car (cdr (cdr x))))
(def (cdddr x) (cdr (cdr (cdr x))))
(def (cadddr x) (car (cdr (cdr (cdr x)))))
;; list? function is the same as pair? function
(def list? pair?)

;; list
(def (list . arg) arg)

;; list length
;; eg (list-length '(1 2)) => 2
(def (list-length l)
  (def (list-length-iter l count)
    (if (null? l)
      count
      (list-length-iter (cdr l)
                        (+ count 1))))
  (list-length-iter l 0))

;; list-reverse
(def (list-reverse l)
  (def (list-reverse-iter l output)
    (if (null? l)
      output
      (list-reverse-iter (cdr l) (cons (car l) output))))
  (list-reverse-iter l '()))

;; list-ref
;; eg (list-ref '(1 2 3) 2) => 3
(def (list-ref l i)
  (if (= i 0)
    (car l)
    (list-ref (cdr l)
              (- i 1))))

;; list-append
;; eg (list-append '(1 2) '(4 5)) => '(1 2 4 5)
;; eg (list-append '(1 2) 4) => '(1 2 4)
(def (list-append l0 l1)
  (def (list-append-iter0 l0)
    (if (null? l0)
      l1
      (cons (car l0) 
            (list-append-iter0 (cdr l0)))))
  (if (pair? l1)
    (list-append-iter0 l0)
    (begin (set! l1 (cons l1 '()))
           (list-append-iter0 l0))
    ))

;; list->vector
(def (list->vector l)
  (def (list->vector-iter l output count)
    (if (null? l)
      output
      (list->vector-iter (cdr l) 
                         (vector-set! output count (car l))
                         (+ count 1))))
  (list->vector-iter l #[] 0))

;; this function is for ~@ 
(def (append x y) (if (null? x) y (cons (car x) (append (cdr x) y))))


;; list range
;; (list-range 6) => '(0 1 2 3 4 5)
;; (list-range 3 5) => '(3, 4)
(def (list-range a0 a1 a2)
  ;; judge several conditions
    (def judge-sign (if (< a2 0) 
                      <=
                    >=
                    ))
    (def (list-range-iter v)
      (if (judge-sign v a1)
        '()
        (cons v 
              (list-range-iter (+ v a2)))))
    (list-range-iter a0))
;; macro for the function above
(defmacro list-range 
  [(n) (~list-range 0 ~n 1)]
  [(a, b) (~list-range ~a ~b 1)]
  [(a, b, c) (~list-range ~a ~b ~c)])


