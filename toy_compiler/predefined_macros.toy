;; toy language
;; predefined_macros.toy


;; defm
;; for defining single macro
;; eg (defm square [x] [* ~x ~x])
;; (square 14) => (* 14 14)
(defmacro defm ([macro_name a b] [defmacro ~macro_name (~a ~b)]))

;; defn
;; eg (defn square [x] (* x x))
(defm defn [fn-name args . body]
  [def ~fn-name (lambda ~args ~@body)])

;; defs
;; (defs a 12 b 15) => (begin (def a 12) (def b 15))
(defmacro defs 
  [() ()]
  [(a b) (def ~a ~b)]
  [(a b . arg) (begin (def ~a ~b) (defs ~@arg))]
  )
;; (let [a 12 b 15] (+ a b)) => ((lambda [] (def a 12) (def b 15) (+ a b)))
;; create new frame
(defm let [var_vals . body]
  ((lambda [] (defs ~@var_vals) (begin ~@body))))

;; (def a 0) (let! [a 12 b 15] '()) ; a changed to 12
;; use current frame
(defm let! [var_vals . body]
  (begin (defs ~@var_vals)
         (begin ~@body)))

;; while
(defm while [arg . body]
  (let [__t__ (lambda [] (if ~arg (begin ~@body (__t__))  '() ))]
    (__t__)))

;; extend string-append so that it support variadic parameters 
(defmacro string-append
  [() ""]
  [(a) ~a]
  [(a . b) (~string-append ~a (string-append ~@b))])

;; macros used to extend + - * /
(defmacro +
  [() 0]
  [(a) ~a] 
  [(a . b) (~+ ~a (+ ~@b))])

(defmacro -
  [(a) (- 0 ~a)]
  [(a . b) (~- ~a (+ ~@b))])

(defmacro * 
  [() 1]
  [(a) ~a]
  [(a . b) (~* ~a (* ~@b))])

(defmacro / 
  [(a) (/ 1 a)]
  [(a . b) (~/ ~a (* ~@b))])

;; i++ i--
(defm -- [x] [set! ~x (- ~x 1)])
(defm ++ [x] [set! ~x (+ ~x 1)])

;; for
;; ### vector ###
;; (for [i #[1,2,3]]
;;    (display i))
;; ### list   ###
;; (for [i '(1 2 3)]
;;    (display i))
(defm for [[i v] . body]
  [if (pair? ~v) ;; v is pair
   (let [for-pair (lambda [__v__]
                      (if (null? __v__)
                        '()
                        (begin (def ~i (car __v__))
                               ~@body
                               (for-pair (cdr __v__)))))]
     (for-pair ~v))
   (let [v ~v
         length (vector-length v) 
         for-vector (lambda [__i__]
                            (if (= __i__ length)
                              '()
                              (begin (def ~i (vector-ref v __i__))
                                     ~@body
                                     (for-vector (+ __i__ 1)))))]
     (for-vector 0))])


;; cond
;; (cond [test0 . body0] [test1 . body1] [test2 . body2] ...)
(defmacro cond 
  [() ()]
  [([#else . body])
   (begin ~@body)]
  [([#else . body] . rest)
   (begin (display "ERROR: Macro cond. Expression existed after else")
          (display (quote ~rest)))]
  [([test . body])
   (if ~test 
     (begin ~@body) 
     '())]
  [([test . body] . rest)
   (if ~test 
     (begin ~@body)
     (cond ~@rest))])




