;; toy language
;; string.toy
;; define string package

;; string-length 
;; string-slice
;; string-ref
;; string-append
;; string->char-code

;; I might support char data type in the future

;; string find string
;; eg: (string-find "Hello" "H")   => 0
;; eg: (string-find "Hello" "l" 3) => 3
(def string-find (lambda [input-str find-string start-index end-index]
                         (set! start-index (or start-index 0))
                         (set! end-index (or end-index (string-length input-str)))
                         (def input-str-length (string-length input-str))
                         (def find-string-length (string-length find-string))                  
                         (def string-find-helper
                           (lambda [i]
                                   ;; didn't find required string
                                   (cond [(> (+ i find-string-length) end-index)
                                          -1]
                                         [(string=? (string-slice input-str i (+ i find-string-length))
                                                    find-string)
                                          i]
                                         [else 
                                          (string-find-helper (+ i 1))
                                          ]
                                         )
                                   ))
                         (string-find-helper start-index)))
;; string replace string
;; eg: (string-replace "Hello" "l" "a") => "Healo"
;; eg: (string-replace "Hello" "l" "a" 3) => "Helao"
(def string-replace (lambda [input-str replace-string with-string start-index]
                            (def replace-string-length (string-length replace-string))
                            (def input-str-length (string-length input-str))
                            (set! start-index (or start-index 0))
                            (def helper 
                              (lambda [i output-str]
                                      ;; didn't find so couldn't replace 
                                      (cond [(> (+ i replace-string-length)
                                                input-str-length)
                                             input-str]
                                            ;; find replace string
                                            [(string=? (string-slice input-str 
                                                                     i
                                                                     (+ i 
                                                                        replace-string-length))
                                                       replace-string)
                                             (string-append output-str
                                                            with-string
                                                            (string-slice input-str 
                                                                          (+ i
                                                                             replace-string-length)
                                                                          input-str-length))]
                                            [else (helper (+ i 1)
                                                          (string-append output-str 
                                                                         (string-ref input-str i)))]
                                            )))
                            (helper start-index "")))
;; replace all
;; eg: (str:replace-all "Hello" "l" "a") => "Heaao"
;; eg: (str:replace-all "Hello" "l" "a" 3) => "Helao"
;; eg: (str:replace-all "Hello" "l" "a" 0 3) => "Healo"
(def string-replace-all
  (lambda [input-str replace-string with-string start-index  end-index]
          (set! start-index (or start-index 0))
          (set! end-index (or end-index (string-length input-str)))
          (def input-str-length (string-length input-str))
          (def replace-string-length (string-length replace-string))
          (def helper
             (lambda [i output-str]
                     ;; reach rend
                     (cond [(> (+ i replace-string-length) end-index)
                            (string-append output-str
                                           (string-slice input-str i input-str-length))]
                           ;; find replace string
                           [(string=? (string-slice input-str 
                                                    i 
                                                    (+ i replace-string-length)) 
                                      replace-string)
                            (helper (+ i replace-string-length)
                                    (string-append output-str with-string))]
                           [else
                            (helper (+ i 1)
                                    (string-append output-str 
                                                   (string-ref input-str i)))]
                                                    )))
          (helper start-index (string-slice input-str 0 start-index))))

;; split string
(def string-split
  (lambda [input-string 
           split-str
           start-index
           return-vector]
          (set! start-index (or start-index 0))
          (set! return-vector (or return-vector '()))
          (def i start-index)
          (def split-str-length (string-length split-str))
          (def input-str-length (string-length input-string))
          (def return-vector-func
            (lambda [output i saved-string]
                    (if (= i input-str-length) ;; end
                      (vector-push! output saved-string)
                      ;; not end yet
                      (if (> (+ i split-str-length) input-str-length) 
                        ;; couldn't split
                        (vector-push! output
                                      (string-append saved-string
                                                     (string-slice input-string
                                                                   i
                                                                   input-str-length)))
                        (if (string=? split-str
                                      (string-slice input-string
                                                    i 
                                                    (+ i split-str-length)))
                          ;; could split
                          (return-vector-func (vector-push! output saved-string)
                                              (+ i split-str-length)
                                              "")
                          (return-vector-func output
                                              (+ i 1)
                                              (string-append saved-string 
                                                             (string-ref input-string i))))))))
          (def return-list-func 
            (lambda [i saved-string]
                    (if (= i input-str-length) ;; end
                      `(~saved-string)
                      ;; not end yet
                      (if (> (+ i split-str-length) input-str-length) 
                        ;; couldn't split
                        `(~(string-append saved-string
                                          (string-slice input-string
                                                        i 
                                                        input-str-length)))
                        (if (string=? split-str 
                                      (string-slice input-string
                                                    i
                                                    (+ i split-str-length)))
                                               ;; could split
                          (cons saved-string 
                                (return-list-func (+ i split-str-length)
                                                  ""))
                          (return-list-func (+ i 1)
                                            (string-append saved-string 
                                                           (string-ref input-string i))))))))
          
          (if return-vector
            (return-vector-func #[] start-index "")
            (return-list-func start-index ""))          
          ))


;; get several char code
(def char-code-0 (string->char-code "0" 0))
(def char-code-9 (string->char-code "9" 0))
(def char-code-A (string->char-code "A" 0))
(def char-code-Z (string->char-code "Z" 0))
(def char-code-a (string->char-code "a" 0))
(def char-code-z (string->char-code "z" 0))
(def char-code-F (string->char-code "F" 0))
(def char-code-f (string->char-code "f" 0))
(def char-code-space (string->char-code " " 0))
(def char-code-\t (string->char-code "\t" 0))
(def char-code-\n (string->char-code "\n" 0))
;; string-is-digit
(def (string-is-digit s)
  (def length-of-str (string-length s))
  (def (string-is-digit-iter i)
    (if (= i length-of-str)
      'true
      (begin (def c (string->char-code s i))
             (if (and (>= c
                          char-code-0)
                      (<= c
                          char-code-9)
                      )
               (string-is-digit-iter (+ i 1))
               '()))))
  (def (string-is-digit-iter-16 i)
    (if (= i length-of-str)
      'true
      (begin (def c (string->char-code s i))
             (if (or (and (>= c 
                              char-code-0)
                          (<= c
                              char-code-9))
                     (or (and (>= c char-code-a)
                              (<= c char-code-f))
                         (and (>= c char-code-A)
                              (<= c char-code-F))))
               (string-is-digit-iter-16 (+ i 1))
               '()))))
  (if (and (> length-of-str 2) ;; check 0x hexa
           (string=? (string-ref s 0)
                     "0")
           (string=? (string-ref s 1)
                     "x"))
    (string-is-digit-iter-16 2)
    (string-is-digit-iter 0)))

;; string-is-upper
(def (string-is-upper s)
  (def length-of-str (string-length s))
  (def (string-is-upper-iter i)
    (if (= i length-of-str)
      'true
      (begin (def c (string->char-code s i))
             (if (and (>= c
                          char-code-A)
                      (<= c
                          char-code-Z))
               (string-is-upper-iter (+ i 1))
               '()))))
  (string-is-upper-iter 0))

;; string-is-lower
(def (string-is-lower s)
  (def length-of-str (string-length s))
  (def (string-is-lower-iter i)
    (if (= i length-of-str)
      'true
      (begin (def c (string->char-code s i))
             (if (and (>= c
                          char-code-a)
                      (<= c
                          char-code-z))
               (string-is-lower-iter (+ i 1))
               '()))))
  (string-is-lower-iter 0))

;; string-is-alpha
(def (string-is-alpha s)
  (def length-of-str (string-length s))
  (def (string-is-alpha-iter i)
    (if (= i length-of-str)
      'true
      (begin (def c (string->char-code s i))
             (if (or (and (>= c
                              char-code-a)
                          (<= c
                              char-code-z))
                     (and (>= c 
                              char-code-A)
                          (<= c 
                              char-code-Z)))
               (string-is-alpha-iter (+ i 1))
               '()))))
  (string-is-alpha-iter 0))

;; string-is-space
(def (string-is-space s)
  (def length-of-str (string-length s))
  (def (string-is-space-iter i)
    (if (= i length-of-str)
      'true
      (begin (def c (string->char-code s i))
             (if (or (= c
                        char-code-space)
                     (= c
                        char-code-\t)
                     (= c
                        char-code-\n))
               (string-is-space-iter (+ i 1))  
               false))))
  (string-is-space-iter 0))


;; eval string
;; eg "\"Hello\"" => string Hello
;; support \t \n \a \"
(def (eval-string-for-compilation s)
  (def length-of-str (- (string-length s) 1))
  (def (eval-string-iter i output-str)
    (def c (string-ref s i))
    (if (>= i length-of-str)
      output-str
      (if (and (< (+ i 1)
                  length-of-str)
               (string=? c
                         "\\"))
        (begin (def c1 (string-ref s (+ i 1)))
               (cond [(string=? c1 "t")
                      (eval-string-iter (+ i 2)
                                        (string-append output-str "\t"))]
                     [(string=? c1 "n")
                      (eval-string-iter (+ i 2)
                                        (string-append output-str "\n"))]
                     [(string=? c1 "a")
                      (eval-string-iter (+ i 2)
                                        (string-append output-str "\a"))]
                     [(string=? c1 "\"")
                      (eval-string-iter (+ i 2)
                                        (string-append output-str "\""))]
                     [else 
                      (eval-string-iter (+ i 1)
                                        (string-append output-str "\\"))]))
        (eval-string-iter (+ i 1)
                          (string-append output-str c))
        )))
  (eval-string-iter 1 ""))


