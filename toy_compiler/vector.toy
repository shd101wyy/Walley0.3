;; toy languge 
;; vector library

;; vector->list
(def (vector->list v)
  (def length (vector-length v))
  (def (vector->list-iter v i)
    (if (= i length)
      '()
      (cons (vector-ref v i)
            (vector->list-iter v
                               (+ i 1)))))
  (vector->list-iter v 0))

;; vector-find
;; find element in vector and return its index
(def (vector-find v o start-index)
  (set! start-index (or start-index 0))
  (def length (vector-length v))
  (def (vector-find-iter i)
    (if (= i length)
      -1 ;; didn't find
      (if (eq? (vector-ref v i)
               o)
        i
        (vector-find-iter (+ i 1))))) 
  (vector-find-iter start-index))

;; vector-range
;; (vector-range 6) => #[0,1,2,3,4,5]
;; (vector-range 3 5) => #[3,4]
(def (vector-range a0 a1 a2)
  ;; judge several conditions
  (def judge-sign (if (< a2 0) 
                    <=
                    >=
                    ))
  (def output #[])
  (def (vector-range-iter v)
    (if (judge-sign v a1)
      output
      (begin (vector-push! output v)
             (vector-range-iter (+ v a2))))
    )
  (vector-range-iter a0))
;; macro for the function above
(defmacro vector-range 
  [(n) (~vector-range 0 ~n 1)]
  [(a, b) (~vector-range ~a ~b 1)]
  [(a, b, c) (~vector-range ~a ~b ~c)])
