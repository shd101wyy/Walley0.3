;; toy language
;; lexer and parser
;; ==== macros ====
;; and
;; Lexer
(def (lexer-iter input-string index)
  (def length-of-input-string (string-length input-string))
  ;; comment ";;"
  (def (lexer-comment input-string index)
    (if (= index (string-length input-string))
      index
      (if (string=? (string-ref input-string index)
                    "\n")
        (+ index 1)
        (lexer-comment input-string (+ index 1)))))
  ;; string
  (def (lexer-string input-string index)
    (if (= index (string-length input-string))
      (begin (display "ERROR: Incomplete String") 
             index)
      (if (string=? (string-ref input-string index)
                    "\\")
        (lexer-string input-string (+ index 2))
        (if (string=? (string-ref input-string index)
                      "\"")
          (+ index 1)
          (lexer-string input-string (+ index 1))))
      ))
  ;; v
  (def (lexer-v input-string index)
    (def c (string-ref input-string index))
    (if (or (= index length-of-input-string)
            (string=? c " ")
            (string=? c "\n")
            (string=? c "\t")
            (string=? c ",")
            (string=? c ")")
            (string=? c "(")
            (string=? c "[")
            (string=? c "]")
            (string=? c "{")
            (string=? c "}")
            (string=? c "'")
            (string=? c "`")
            (string=? c "~")
            (string=? c ";"))
      index
      (lexer-v input-string (+ index 1))))
  ;; lexer 
  (if (= index (string-length input-string))
    '() ;; end
    (begin (def c (string-ref input-string index))
           (cond [(or (string=? c "(")    ;; parenthesis
                      (string=? c ")"))
                  (cons c 
                        (lexer-iter input-string 
                                    (+ index 1)))]
                 [(or (string=? c " ")    ;; space...
                      (string=? c "\n")
                      (string=? c "\t")
                      (string=? c ","))
                  (lexer-iter input-string
                              (+ index 1))]
                 [(and (string=? c "#")   ;; vector
                       (or (string=? (string-ref input-string (+ index 1)) "(")
                           (string=? (string-ref input-string (+ index 1)) "[")))
                  (cons "("
                        (cons "vector" 
                              (lexer-iter input-string
                                          (+ index 2))
                              ))
                  ]
                 [(string=? c "{")
                  (cons "("
                        (cons "dictionary"
                              (lexer-iter input-string
                                          (+ index 1))
                              ))
                  ]
                 [(or (string=? c "[")
                      (string=? c "("))
                  (cons "("
                        (lexer-iter input-string
                                    (+ index 1)))]
                 [(or (string=? c "]")
                      (string=? c ")")
                      (string=? c "}"))
                  (cons ")" 
                        (lexer-iter input-string
                                    (+ index 1)))]
                 [(and (string=? c "~")
                       (string=? (string-ref input-string (+ index 1))
                                 "@"))
                  (cons "~@"
                        (lexer-iter input-string
                                    (+ index 2)))]                 
                 [(or (string=? c "'")
                      (string=? c "`")
                      (string=? c "~"))
                  (cons c 
                        (lexer-iter input-string
                                    (+ index 1)))]
                 [(string=? c ";") ;; comment
                  (lexer-iter input-string
                              (lexer-comment input-string (+ index 1))
                              )
                  ]
                 [(string=? c "\"")
                  (def i (lexer-string input-string 
                                       (+ index 1)))
                  
                  (cons (string-slice input-string 
                                      index
                                      i)
                        (lexer-iter input-string
                                    i))]
                 [else 
                  (def i (lexer-v input-string
                                  index))
                  (cons (string-slice input-string
                                      index
                                      i)
                        (lexer-iter input-string
                                    i))]
                 ))))
;; lexer
(def lexer (lambda [input-string]
                   (lexer-iter input-string 0 '())))

;; parser
;(def parser-rest '())
;(def (formatQuickAccess ns keys)
;  (def (formatQuickAccess-iter keys output count)
;    (if (= count (list-length keys))
;      output
;      (formatQuickAccess-iter (cdr keys)
;                              (cons output 
;                                    (cons (cons 'quote 
;                                                (cons (car keys)
;                                                      '()))
;                                          '()))
;                              )))
;  (formatQuickAccess-iter (cdr keys) 
;                          (cons ns 
;                                (cons (cons 'quote
;                                            (cons (car keys)
;                                                  '()))
;                                      '()))
;                          ))
;; parse symbol or number or quick access
;(def (parser-symbol-or-number v)
;  (if (string=? (string-ref v 0) ;; if it is string, then dont parse 
;                "\"")
;    v
;    '())
;  (def splitted_ (string-split v ":"))
;  (if (or (string=? v ":")
;          (= (list-length splitted_)
;              1)
;          (string=? (string-ref v 0)
;                    ":")
;          (string=? (string-ref v 
;                                (- (string-length v)
;                                   1))
;                    ":"))
;    v
;    (begin (def ns (car splitted_))
;           (def keys (cdr splitted_))
;           (formatQuickAccess ns keys))
;    ))
;; parse special
;(def (parser-special l)
;  (def tag (car l))
;  (cond [(string=? tag "'")
;         (set! tag "quote")]
;        [(string=? tag "~")
;         (set! tag "unquote")]
;        [(string=? tag "~@")
;         (set! tag "unquote-splice")]
;        [else (set! tag "quasiquote")])
;  (set! l (cdr l))
;  (cond [(string=? (car l)  ;; list
;                   "(")
;         (cons tag
;               (cons (parser-list (cdr l) ;; list
;                                  '())))]
;        [(or (string=? (car l) "'")
;             (string=? (car l) "~")
;             (string=? (car l) "`")
;             )
;         (cons tag ;; this place might have errors
;               (cons (parser-special l)
;                     '()))]
;        [else  ;; symbol or number
;         (set! parser-rest (cdr l))
;         (cons tag 
;               (cons (parser-symbol-or-number (car l))
;                     '()))]))

;(def (parser-list l)
;  (cond [(null? l)
;         (display-string "ERROR: invalid statement; Missing )")
;         (set! parser-rest '())
;         '()]
;        [(string=? (car l)
;                   ")")
;         (set! parser-rest (cdr l))
;         '()]
;        [(string=? (car l)
;                   "(")
;         (cons (parser-list (cdr l))
;               (parser-list parser-rest))]
;        [(or (string=? (car l) "'") ;; quote, unquote, quasiquote, unquote-splice
;             (string=? (car l) "~")
;             (string=? (car l) "`")
;             (string=? (car l) "~@"))
;         (cons (parser-special l)
;               (parser-list parser-rest))]
;        [else (cons (parser-symbol-or-number (car l))
;                    (parser-list (cdr l)))]))

;; ******* parser ****** ;; 
;(def (parser l)
;  (cond [(null? l)
;         '()]
;        [(string=? (car l)
;                   "(")
;         (cons (parser-list (cdr l))
;               (parser parser-rest))]
;        [(or (string=? (car l) "'")
;             (string=? (car l) "~")
;             (string=? (car l) "`")
;             (string=? (car l) "~@"))
;         (cons (parser-special l)
;               (parser parser-rest))]
;        [else 
;         (cons (parser-symbol-or-number (car l))
;               (parser (cdr l)))]))
